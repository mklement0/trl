#!/usr/bin/env bash

kTHIS_NAME=$(basename "$BASH_SOURCE")

unset CDPATH  # to prevent unpredictable `cd` behavior

# Output version number and exit, if requested. Note that the `ver='...'` statement is automatically updated by `make version VER=<newVer>` - DO keep the 'v' suffix in the variable _definition_.
[[ $1 == '--version' ]] && { declare ver='v0.2.0'; echo "$kTHIS_NAME ${ver#v}"; exit 0; }

# --- BEGIN: functions

# Helper function for exiting with error message due to runtime error.
#   die [errMsg [exitCode]]
# Default error message states context and indicates that execution is aborted. Default exit code is 1.
# Prefix for context is always prepended.
# Note: An error message is *always* printed; if you just want to exit with a specific code silently, use `exit n` directly.
die() {
  echo "$kTHIS_NAME: ERROR: ${1:-"ABORTING due to unexpected error."}" 1>&2
  exit ${2:-1} # Note: If the argument is non-numeric, the shell prints a warning and uses exit code 255.
}

# Helper function for exiting with error message due to invalid arguments.
#   dieSyntax [errMsg]
# Default error message is provided, as is prefix and suffix; exit code is always 2.
dieSyntax() {
  echo "$kTHIS_NAME: ARGUMENT ERROR: ${1:-"Invalid argument(s) specified."} Use -h for help." 1>&2
  exit 2
}

# Core helper function that transforms the stdin input passed to it, based on the environment variables set by the script after options parsing.
# Note that the output by design has NO trailing \n, so we can append output directly to it (closing wrapper string) without a forced line break.
transform() {
  # Note: Thanks to -n, the script passed to -e is executed for *every line* of input.
  perl -MText::ParseWords -ne '
    chomp;
    sub enclose { return $ENV{odelim} . $_ . $ENV{odelim}; }
    my @flds = grep { $_ =~ /\S/ } Text::ParseWords::parse_line($ENV{sep}, $ENV{keepQuotes}, $_);
    if ($#flds >= 0) {
      print join($ENV{osep}, map { enclose $_ } @flds);
      if ($ENV{orsep} ne "") { print $ENV{orsep} unless eof; }
    }'
}


# Trims (strips off) *trailing* whitespace from a *single line* (any mix of spaces and tabs); pass text as a single (and only) argument.
# E.g.: trimmed=$(rtrimSingleLine ' a b   ')   # -> $trimmed == ' a b'
rtrimSingleLine() {
  [[ $1 =~ ^(.*[^[:blank:]])([[:blank:]]+)$ ]] && printf '%s' "${BASH_REMATCH[1]}" || printf '%s' "$1"
}

# Trims (strips off) *leading* whitespace from a *single line* (any mix of spaces and tabs); pass text as a single (and only) argument.
# E.g.: trimmed=$(ltrimSingleLine $' \t  \t a b ')   # -> $trimmed == 'a b '
ltrimSingleLine() {
  [[ $1 =~ ^[[:blank:]]+([^[:blank:]].*)$ ]] && printf '%s' "${BASH_REMATCH[1]}" || printf '%s' "$1"
}

# --- END: functions


# Command-line help.
if [[ $1 == '--help' || $1 == '-h' ]]; then
  cat <<EOF
SYNOPSIS
  $kTHIS_NAME [-s inSep] [-S outSep] [-k|-D outDelim] [-W wrapText] [-R ors] [text ...]

DESCRIPTION
  $kTHIS_NAME *tr*ansforms *l*ists of unquoted and/or quoted strings, by
  default between single- and multi-line forms.
  Separators, delimiters, and a wrapper string are configurable.
  
  Both single- and double-quotes are recognized as input item delimiters.
  
  Caveats:
   - Unbalanced single- or double-quotes in the input break parsing and
     result in unpredictable output.
   - While \' and \" are recognized as literal single- and double-quotes in
     the input, they are output as literals without (re-)escaping; the only
     exception is \' inside a single-quoted string in the input, which outputs
     \' as well.

  Input is provided via one or more operands or, in their absence, via stdin.
  To disambiguate operands from options, precede operands with '--' as a
  separate argument.
  
  Sensible defaults are used for options that aren't explicitly specified; 
  their values depend on whether the input is single- or multi-line:
  Single-line input:
    List items are assumed to be separated with whitespace, a comma, or 
    a comma followed by whitespace.
    They are transformed into multi-line output with each item on its own
    line, stripped of surrounding quotes.
  Multi-line input:
    List items are assumed to be each on a separate line.
    They are transformed into a single-line list with items double-quoted
    and separated by a comma followed by a space.
  Explicitly specified options override the behavior described.

  Some options described below come in two flavors:
    - lowercase options such as -s describe the *input*
    - corresponding uppercase options such as -S control the *output*

  With the exception of -s, which accepts a Perl regular expression to
  describe the separators between input items, options with arguments expect
  literals rather than escape sequences; if needed, use ANSI C-quoted strings
  in Bash, Ksh, or Zsh to create literal control characters; e.g.,
  $'\n' and $'\t' create a literal newline and tab, respectively.

    -k
      Keeps all items in their input form, whether quoted or unquoted; the
      default is to remove quoting on input processing; double-quoting is
      by default applied on *output* when transforming a multi-line list to a
      single-line list; to unconditionally produce unquoted items, use
      -D '', to enforce a uniform quoting character, use -D <delim>.
    -s inSep
      Specifies the input item separator, i.e., what separates items in the
      input, using a Perl regular expression. Note that *runs* of matches
      (i.e., one or more contiguous instances) are invariably considered a
      *single* separator.
    -S outSep
      Specifies the output item separator, i.e., how to separate the items
      on output, irrespective of what separated them in the input.
    -D outDelim
      Specifies the delimiter to put around the output items; this may be
      any string, but note that on *input* only single- and double-quotes
      are recognized; cannot be combined with -k.
      Use -D '' to make all output items unquoted.
    -W wrapText
      Specifies output wrapper text to place around the entire output list,
      including  desired whitespace, if any: the first *half* of the text is
      placed before the result, the second one after; if the output list is
      multi-line, a newline is appended / prepended to the halves.
    -R ors
      Specifies the output record separator, which only applies to multi-line
      input whose lines contain multiple items each: by default, the output
      record separator is set to the same value as the input item separator,
      so that a multi-line list results in a uniformly separated single-line
      list. Specify -R <newline to instead retain the line breaks from the
      input (while transforming the items on each line), or pass an
      alternative separator to replace the line breaks.

PREREQUISITES
  Perl 5 must be installed.

EXAMPLES
  $kTHIS_NAME '"one", "two", "three"' # -> $'one\ntwo\three'
  $kTHIS_NAME <<<$'one\ntwo\nthree' # -> '"one", "two", "three"'
  $kTHIS_NAME -W '(  )' -S ' ' -D '' '"one","two","three"' # -> '( one two three )'
  $kTHIS_NAME -s '[() -]' -S , '(789) 123-456' # -> '789,123,456'
EOF
    exit 0
fi

# Make sure that Perl is available.
[[ -n $(command -v perl) ]] || die "This utility requires Perl. Executable \`perl\` cannot be located."

# NOTE: We explicitly UNSET the variables corresponding to options,
#       so that we can distinguish between never having set a value and
#       deliberately having assigned the empty string.
unset odelim sep osep rsep orsep keepQuotes outWrapper inputIsSingleLine

# ----- BEGIN: OPTIONS PARSING: This is MOSTLY generic code, but:
#  - SET allowOptsAfterOperands AFTER THIS COMMENT TO 1 to ALLOW OPTIONS TO BE MIXED WITH OPERANDS rather than requiring all options to come before the 1st operand, as POSIX mandates.
#  - The SPECIFIC OPTIONS MUST BE HANDLED IN A CASE ... ESAC STATEMENT BELOW; look for "BEGIN: CUSTOMIZE HERE ... END: CUSTOMIZE HERE"
#  - Assumes presence of function dieSyntax(); if not present, define as: dieSyntax() { echo "$(basename -- "$BASH_SOURCE"): ARGUMENT ERROR: ${1:-"Invalid argument(s) specified."} Use -h for help." >&2; exit 2; }
#  - After the end of options parsing, $@ only contains the operands (non-option arguments), if any.
allowOptsAfterOperands=1 operands=() i=0 optName= isLong=0 prefix= optArg= haveOptArgAttached=0 haveOptArgAsNextArg=0 acceptOptArg=0 needOptArg=0 optsSpecified=0
while (( $# )); do
  if [[ $1 =~ ^(-)[a-zA-Z0-9]+.*$ || $1 =~ ^(--)[a-zA-Z0-9]+.*$ ]]; then # an option: either a short option / multiple short options in compressed form or a long option
    prefix=${BASH_REMATCH[1]}; [[ $prefix == '--' ]] && isLong=1 || isLong=0
    for (( i = 1; i < (isLong ? 2 : ${#1}); i++ )); do
        acceptOptArg=0 needOptArg=0 haveOptArgAttached=0 haveOptArgAsNextArg=0 optArgAttached= optArgOpt= optArgReq=
        if (( isLong )); then # long option: parse into name and, if present, argument
          optName=${1:2}
          [[ $optName =~ ^([^=]+)=(.*)$ ]] && { optName=${BASH_REMATCH[1]}; optArgAttached=${BASH_REMATCH[2]}; haveOptArgAttached=1; }
        else # short option: *if* it takes an argument, the rest of the string, if any, is by definition the argument.
          optName=${1:i:1}; optArgAttached=${1:i+1}; (( ${#optArgAttached} >= 1 )) && haveOptArgAttached=1
        fi
        (( haveOptArgAttached )) && optArgOpt=$optArgAttached optArgReq=$optArgAttached || { (( $# > 1 )) && { optArgReq=$2; haveOptArgAsNextArg=1; }; }
        optsSpecified=1
        # ---- BEGIN: CUSTOMIZE HERE
        case $optName in
          # ---- ltr options
          k|keep) # keep input quoting
            keepQuotes=1
            ;;
          s|separator|separator=*)  # input item separator
            needOptArg=1
            sep=$optArgReq
            ;;
          S|out-separator|out-separator=*)  # output item separator
            needOptArg=1
            osep=$optArgReq
            ;;
          R|out-rec-separator|out-rec-separator=*)  # output record separator
            needOptArg=1
            orsep=$optArgReq
            ;;
          D|out-delim|out-delim=*) # output delims - note that the only *input* delims supported are single and double quotes
            needOptArg=1
            odelim=$optArgReq
            ;;
          W|out-wrapper|out-wrapper=*)
            needOptArg=1
            outWrapper=$optArgReq
            ;;
          *)            
            dieSyntax "Unknown option: ${prefix}${optName}."
            ;;
        esac
        # ---- END: CUSTOMIZE HERE
        (( needOptArg )) && { (( ! haveOptArgAttached && ! haveOptArgAsNextArg )) && dieSyntax "Option ${prefix}${optName} is missing its argument." || (( haveOptArgAsNextArg )) && shift; }
        (( acceptOptArg || needOptArg )) && break
    done
  else # an operand
    if [[ $1 == '--' ]]; then
      shift; operands+=( "$@" ); break
    elif (( allowOptsAfterOperands )); then
      operands+=( "$1" ) # continue 
    else
      operands=( "$@" )
      break
    fi
  fi
  shift
done
(( "${#operands[@]}" > 0 )) && set -- "${operands[@]}"; unset allowOptsAfterOperands operands i optName isLong prefix optArgAttached haveOptArgAttached haveOptArgAsNextArg acceptOptArg needOptArg
# ----- END: OPTIONS PARSING: "$@" now contains all operands (non-option arguments).


# Gather the input: remaining operand(s) OR stdin:
# We also determine if the input is single- or multi-line, as that fundamentally governs the default behavior.
if (( $# > 0 )); then
  if (( $# == 1 )); then
    txt=$1
    # Determine if the input - the one and only operand - is single-line or not.
    [[ $txt =~ $'\n' ]] && inputIsSingleLine=0 || inputIsSingleLine=1
  else # if multiple operands were specified, we always consider the input single-line, but convert them to 1-item-per-line presentation so as to preserve item boundaries
    inputIsSingleLine=1
    txt=$(printf '%s\n' "$@")
  fi
else # read from stdin    
  txt=$(</dev/stdin)
  (( $(grep -c '^' <(printf %s "$txt")) <= 1 )) && inputIsSingleLine=1
fi

# Do nothing, if the input is empty.
(( ${#txt} > 0 )) || exit 0

# !! If we blindly escape ' and " instances in the input, we lose the ability to treat them as delimiters, so we don't do it.
# !! Unfortunately, conversely, unbalanced instances cause this script to malfunction (empy or incomplete output, with no error message).
# txt=${txt//\'/\\\'}
# txt=${txt//\"/\\\"}

# Check for incompatible options:
(( keepQuotes )) && [[ ! (-z $odelim && -n ${odelim-unset}) ]] && dieSyntax "Incompatible options specified."

# Determine the default option values, based on whether the input is single- or multi-line.
if (( inputIsSingleLine )); then # single-line input

  # recognize whitespace, a comma, or a comma followed by whitespace as the input-field separator
  # strip quotes, put each field on its own line
  (( $# > 1 )) && sep=${sep-$'\n'} || sep=${sep-',?\s+|,'}
  osep=${osep-$'\n'}
  orsep=${orsep-$osep}
  keepQuotes=${keepQuotes-0}

else #  multi-line input

  # recognize newlines as input-field separators
  # double-quote fields on output (irrespective of whether they were quoted or not), and separate them with ', '
  sep=${sep-$'\n'}
  osep=${osep-$', '}
  orsep=${orsep-$osep}
  keepQuotes=${keepQuotes-0}
  (( ! keepQuotes )) && odelim=${odelim-\"}

fi

# If wrapper string was specified, split into prologue and epilogue.
outWrapperBefore= outWrapperAfter=
if [[ -n $outWrapper ]]; then
  outWrapperBefore=${outWrapper:0:${#outWrapper}/2}
  outWrapperAfter=${outWrapper:${#outWrapperBefore}}
  # Adjust the wrapper strings, if the output is multi-line.
  if [[ $osep =~ $'\n' || $orsep =~ $'\n' ]]; then
    [[ $outWrapperBefore =~ $'\n' ]] || outWrapperBefore="$(rtrimSingleLine "$outWrapperBefore")"$'\n'
    # The closing string doesn't need a leading \n, because transform() output always ends in \n.
    [[ $outWrapperAfter =~ ^$'\n' ]] || outWrapperAfter=$'\n'"$(ltrimSingleLine "$outWrapperAfter")"
  fi
fi

# Print opening wrapper string, if any.
[[ -n $outWrapperBefore ]] && printf %s "$outWrapperBefore"

# pv odelim sep osep orsep keepQuotes txt

  # Export the behavior-controlling variables for use by the Perl command inside transform().
export odelim sep osep rsep orsep keepQuotes

  # Perform the transformation.
transform  < <(printf %s "$txt") || die

# Print closing wrapper string, if any.
# Either way, print a terminating \n, because transform() - by design - returns its output without one.
[[ -n $outWrapperAfter ]] && printf '%s\n' "$outWrapperAfter" || printf '\n'

exit 0

